version: "3.7"

networks:
  kafka-network:
    driver: bridge

services:
    
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/confluentinc"
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    networks:
      - kafka-network

  # This has three listeners you can experiment with.
  # DOCKER_INTERNAL for internal traffic on the Docker network
  # DOCKER_HOST for traffic from the Docker-host machine (`localhost`)
  # DOCKER_OUTSIDE for traffic from outside, reaching the Docker host on the DNS name `never-gonna-give-you-up`
  # https://github.com/provectus/kafka-ui/blob/master/documentation/compose/kafka-ui.yaml
  kafka0:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka0
    hostname: kafka0
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/confluentinc"
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka0:29092,OUTSIDE://${DOCKER_HOST_IP:-127.0.0.1}:9092'
      KAFKA_LISTENERS: 'INTERNAL://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'

      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka0 -Dcom.sun.management.jmxremote.rmi.port=9999
      KAFKA_JMX_HOSTNAME: "kafka0"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zookeeper
    networks:
      - kafka-network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8081:8080
    depends_on:
      - kafka0
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka0:29092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9999
      DYNAMIC_CONFIG_ENABLED: 'true'  # not necessary, added for tests
    networks:
      - kafka-network

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local